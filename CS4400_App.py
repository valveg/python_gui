from tkinter import *import tkinter.ttkimport pymysqlimport osimport timefrom datetime import dateclass Phase3:    def __init__(self,win):        self.win = win        self.top = Toplevel()        self.win.title("Login")                self.top.title("New Student Registration")        self.top.update()        self.top.withdraw()        ########################################################################        #1. Log In        frame1 = Frame(self.win)        frame1.grid(row=0,column=0)                frame2 = Frame(self.win)        frame2.grid(row=1,column=0)        picFrame1 = Frame(self.win)        picFrame1.grid(row=2,column=1)        self.photo = PhotoImage(file="buzz.gif")        picLabel = Label(picFrame1, image=self.photo)        picLabel.grid(row=0,column=0,rowspan=4)        loginLabel = Label(frame1,text="Login",height=4,font = "Helvetica 20")        loginLabel.grid(row=1,column=1,sticky=W)        loginLabel.configure(foreground="dark goldenrod")        blankLabel = Label(frame1)        blankLabel.grid(row=2,column=1)                    userLabel = Label(frame1,text="Username")        userLabel.grid(row=2,column=0,sticky=E)        blankLabel = Label(frame1)        blankLabel.grid(row=3,column=0)        passLabel = Label(frame1,text="Password")        passLabel.grid(row=4,column=0,sticky=E)                blank = Label(frame1)        blank.grid(row=5,column=0)        self.userEntry = Entry(frame1,width=30)        self.userEntry.grid(row=2,column=2,sticky=W)        blank = Label(frame1)        blank.grid(row=4,column=1)        self.passEntry = Entry(frame1,width=30)        self.passEntry.grid(row=4,column=2,sticky=W)        loginButton = Button(frame2,text="Login",command=self.LoginCheck)        loginButton.grid(row=0,column=1)        blank = Label(frame2,width=10)        blank.grid(row=0,column=2)        #command=self.MainPage only while testing it        registerButton = Button(frame2,text="Register",command=self.Register)        registerButton.grid(row=0,column=3)        ############################################################################2. New User Registration                frame3 = Frame(self.top)        frame3.grid(row=0,column=0)                frame4 = Frame(self.top)        frame4.grid(row=1,column=0)        regLabel = Label(frame3,text="New Student Registration",height = 2,font = "Helvetica 20")        regLabel.grid(row=0,column=1,sticky=E)        regLabel.configure(foreground="dark goldenrod")        uLabel = Label(frame3,text="Username")        uLabel.grid(row=1,column=0,sticky=E,padx=5, pady=5)           eLabel2 = Label(frame3,text="GT Email Address")        eLabel2.grid(row=2,column=0,sticky=E,padx=5, pady=5)        passLabel2 = Label(frame3,text="Password")        passLabel2.grid(row=3,column=0,sticky=E,padx=5, pady=5)           passLabel3 = Label(frame3,text="Confirm Password")        passLabel3.grid(row=4,column=0,sticky=E,padx=5, pady=5)        blank = Label(frame3,width=5)        blank.grid(row=0,column = 2)        self.usernameVar = StringVar()        self.usernameEntry = Entry(frame3,textvariable=self.usernameVar,width=30)        self.usernameEntry.grid(row=1,column=1,sticky=W)             self.emailVar = StringVar()        self.emailEntry = Entry(frame3,textvariable=self.emailVar,width=30)        self.emailEntry.grid(row=2,column=1,sticky=W)        self.passVar2 = StringVar()        self.passEntry2 = Entry(frame3,textvariable=self.passVar2,width=30)        self.passEntry2.grid(row=3,column=1,sticky=W)            self.passVar3 = StringVar()        self.passEntry3 = Entry(frame3,textvariable=self.passVar3,width=30)        self.passEntry3.grid(row=4,column=1,sticky=W)            blankLabel = Label(frame4,width=28,height=2)        blankLabel.grid(row=0,column=0)        createButton = Button(frame4,text="Create",width=27,pady=10,command=self.Create)        createButton.grid(row=1,column=0,sticky=S)    def LoginPage(self):        self.top.update()        self.top.withdraw()        self.win.deiconify()    def Register(self):        self.win.update()        self.win.withdraw()        self.top.deiconify()#####################################################################################    #HELPER METHOD FOR NEW STUDENT REGISTRATION           #checks for creating a new student profile    def Create(self):                User = self.usernameEntry.get()        self.user = User.lower()                Email = self.emailEntry.get()        self.email = Email.lower()                PassWord = self.passEntry2.get()        self.password = PassWord.lower()                ConfirmPass = self.passEntry3.get()        confirmPass = ConfirmPass.lower()        messagebox.showwarning("Error!","You must confirm your password in the confirm password entry.")        #if user is blank , must enter username        if self.user == "":            messagebox.showwarning("Error!","You must enter a username.")            return None        #if GT email address is blank, must enter GT email address        if self.email == "":            messagebox.showwarning("Error!","You must enter a GT email address")            return None        #if password is blank, must enter a password        if self.password == "":            messagebox.showwarning("Error!","You must enter a password in the password entry.")            return None        if len(self.user) > 30:            messagebox.showwarning("Error!","Username must be 30 characters or smaller.")            return None        if len(self.password) > 30:            messagebox.showwarning("Error!","Password must be 30 characters or smaller.")            return None        #if confirm password is blank, must enter password        if confirmPass == "":            messagebox.showwarning("Error!","You must confirm your password in the confirm password entry.")            return None                   #if password and confirm password aren't the same                if self.password != confirmPass:            messagebox.showwarning("Error!","Passwords must match.")            return None        #if GT email address isn't a valid GT email        if self.email[-11:]!= "@gatech.edu":            messagebox.showwarning("Error!","You must enter a valid GT email.")            return None        #now check if username/gtemail already exists in the database ##################################                hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        sqlCheck = "SELECT GT_email,Username FROM USER;"        cursor.execute(sqlCheck)        emailList = []        usaList = []                for record in cursor:            email = record[0]            usa = record[1]            emailList.append(email)            usaList.append(usa)                db.commit()        cursor.close()        db.close()                if self.email in emailList:            messagebox.showwarning("Error!","This GT email address is already taken.")            return None        if self.user in usaList:            messagebox.showwarning("Error!","This username is already taken.")            return None        #self.win.withdraw() how to hide login window when new user is registered???                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        sql = '''INSERT INTO USER (Username,GT_email,Password,UserType) VALUES (%s,%s,%s,%s)'''        cursor.execute(sql,(self.user,self.email,self.password,"Student"))        db.commit()        cursor.close()        db.close()        messagebox.showinfo("Congratulations!","You are now registered.")        self.LoginPage()            #HELPER METHOD FOR LOGIN WINDOW    #when you click login button, runs all the checks then logs you in    def LoginCheck(self):        User = self.userEntry.get()        user = User.lower()        PassWord = self.passEntry.get()        passWord = PassWord.lower()        #if user is blank , must enter username        if user == "":            messagebox.showwarning("Error!","You must enter a username.")            return None        #if password is blank, must enter a password        if passWord == "":            messagebox.showwarning("Error!","You must enter a password.")            return None        #actual means logged in,current        self.actualUser = ""        self.actualPass = ""        self.actualEmail = ""                hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"        db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        sqlCheck = "SELECT Username,Password,Gt_email,UserType FROM USER WHERE Username=%s AND Password=%s;"        num = cursor.execute(sqlCheck,(user,passWord))        #if there are no things that equal to user and password in the database        if num==0:            messagebox.showwarning("Error!","This username/password combo does not exist in the system. Please try again or register.")            db.commit()            cursor.close()            db.close()            return None                    for record in cursor:            theUserName = record[0]            thePassWord = record[1]            #theEmail = record[2]            theUserType = record[3]                        if theUserName == user:                if thePassWord == passWord:                    self.actualUser = self.actualUser + theUserName                    self.actualPass = self.actualPass + thePassWord                    #self.actualEmail = self.actualEmail + theEmail                                        messagebox.showinfo("Congratulations!","You have logged in successfully.")                    db.commit()                    cursor.close()                    db.close()                    if theUserType == "Student":                        self.MainPage()                        return None                                        elif theUserType == "Admin":                        self.chooseFunctionality()                        return None                else:                    messagebox.showwarning("Error!","This username/password combo does not exist in the system. Please try again or register.")                    db.commit()                    cursor.close()                    db.close()                    return None            else:                messagebox.showwarning("Error!","This username/password combo does not exist in the system. Please try again or register.")                db.commit()                cursor.close()                db.close()                return None                       db.commit()        cursor.close()        db.close()#####################################################################################        #1. Main Page            def MainPage(self):        self.main = Toplevel()        self.win.update()        self.win.withdraw()        self.main.title("Main Page")        ## Counter for the amount of extra categories being filtered        self.catCount = 0        ## Create a list to hold extra categories        self.extraCategoryList = []        #scrollbar?        frame = Frame(self.main, bd=2)        frame.grid_rowconfigure(0, weight=1)        frame.grid_columnconfigure(0, weight=1)        yscrollbar = Scrollbar(frame)        yscrollbar.grid(row=0, column=1, sticky=N+S)        self.canvas = Canvas(frame, bd=0,yscrollcommand=yscrollbar.set)        self.canvas.grid(row=0, column=0, sticky=N+S+E+W)        yscrollbar.config(command=self.canvas.yview)        frame.pack()        mid = Frame(self.canvas)        mid.grid(row=0,column=0)                hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        sqlCheck = "SELECT Category_name FROM CATEGORY ORDER BY Category_name;"        cursor.execute(sqlCheck)        self.categoryList = []                for record in cursor:            category = record[0]            self.categoryList.append(category)        sql = "SELECT Designation_name FROM DESIGNATION ORDER BY Designation_name;"        cursor.execute(sql)        self.designationList = []                for record in cursor:            designation = record[0]            self.designationList.append(designation)                check = "SELECT Major_name FROM MAJOR ORDER BY Major_name;"        cursor.execute(check)        self.majorList = []                for record in cursor:            major = record[0]            self.majorList.append(major)                db.commit()        cursor.close()        db.close()        mePhoto = PhotoImage(file="icon.gif")                meButton = Button(mid, image=mePhoto,command=self.MePage)        meButton.image=mePhoto        meButton.grid(row=0,column=0)        blank = Label(mid,height=2)        blank.grid(row=1,column=1)        mLabel = Label(mid,text="Main Page",height = 2,font = "Helvetica 30")        mLabel.grid(row=0,column=1,sticky=E)        mLabel.configure(foreground="dark goldenrod")        tLabel = Label(mid,text="Title")        tLabel.grid(row=2,column=0)        self.titleVar = StringVar()        self.titleEntry = Entry(mid,textvariable=self.titleVar,width=30)        self.titleEntry.grid(row=2,column=1)        cLabel = Label(mid,text="Category")        cLabel.grid(row=2,column=2)        self.categoryVar = StringVar()        catDrop = OptionMenu(mid,self.categoryVar,*self.categoryList)        catDrop.grid(row=2,column=3)        catDrop.config(width=30)        #ADD A CATEGORY DROPDOWN        self.categoryFrame = Frame(mid)        self.categoryFrame.grid(row=2,column=4)                addCategory = Button(self.categoryFrame,text="Add a category",command=self.addCategory)        addCategory.grid(row=0,column=0)        self.categoryRow = 0        desLabel = Label(mid,text="Designation")        desLabel.grid(row=3,column=0)        self.designationVar = StringVar()        desDrop = OptionMenu(mid,self.designationVar,*self.designationList)        desDrop.grid(row=3,column=1)        desDrop.config(width=30)        majLabel = Label(mid,text="Major")        majLabel.grid(row=4,column=0)        self.majorVar = StringVar()        majDrop = OptionMenu(mid,self.majorVar,*self.majorList)        majDrop.grid(row=4,column=1)        majDrop.config(width=30)        self.yearList = ["Freshman","Sophomore","Junior","Senior"]                yrLabel = Label(mid,text="Year")        yrLabel.grid(row=5,column=0)        self.yearVar = StringVar()        yearDrop = OptionMenu(mid,self.yearVar,*self.yearList)        yearDrop.grid(row=5,column=1)                self.value = IntVar()        self.value.set(3)            project = Radiobutton(mid, text="Project", variable=self.value, value=1)        project.grid(row=5,column=2)        course = Radiobutton(mid, text="Course", variable=self.value, value=2)        course.grid(row=5,column=3)        both = Radiobutton(mid, text="Both", variable=self.value, value=3)        both.grid(row=5,column=4)        applyFilter = Button(mid,text="Apply Filter",width=15,height=2,command=self.applyFilter)        applyFilter.grid(row=6,column=3,sticky=E)        resetFilter = Button(mid,text="Reset Filter",width=15,height=2,command=self.resetFilter)        resetFilter.grid(row=6,column=4,sticky=W)        self.applyFilter()            def generatelist(self, sql_str):        hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()                self.outputFrame = tkinter.ttk.Treeview(self.canvas, columns=('Type'))        self.outputFrame.grid(row=1,column=0, sticky=W+E+N+S)        self.outputFrame.heading("#0", text='Name', anchor='w')        self.outputFrame.heading('Type', text='Type')        cursor.execute(sql_str)        self.project_course = cursor.fetchall()        helpList = []        if (self.majorVar.get() != "" and self.yearVar.get() != ""):                        for item in self.project_course:                mySQL = "SELECT P_name FROM PROJ_REQ WHERE P_name = '" + item[0] + "' AND Requirement = '" + self.yearVar.get() + "';"                cursor.execute(mySQL)                x = cursor.fetchall()                if x != ():                    helpList.append(item)            self.project_course = helpList                        db.commit()        cursor.close()        db.close()        for item in self.project_course:            self.outputFrame.insert('', 'end', text=item[0], values=item[1])        self.outputFrame.bind("<Double-1>", self.OnDoubleClick)    #HELPER METHOD FOR MAIN PAGE    #Open Project or Course view    def OnDoubleClick(self, event):        name = self.outputFrame.identify('item',event.x,event.y)        self.info= [self.outputFrame.item(name,"text"), self.outputFrame.item(name,"values")[0]]        #print(self.info)        if self.info[1] == "Project":            self.viewProject()        if self.info[1] == "Course":                        #self.courseInfo = self.info            #print(self.info)            self.viewCourse()     #HELPER METHOD FOR MAIN PAGE    #every time you click this, new category dropdown forms, need to work on this still    def addCategory(self):        self.extraCategoryList.append('self.extraCategoryVar%d' % self.catCount)        self.extraCategoryList[self.catCount] = StringVar()        aCatDrop = OptionMenu(self.categoryFrame,self.extraCategoryList[self.catCount],*self.categoryList)        self.categoryRow = self.categoryRow + 1        aCatDrop.grid(row=self.categoryRow,column=0)        aCatDrop.config(width=30)        self.catCount += 1            #HELPER METHOD FOR MAIN PAGE    #makes all the filters go back to blank and no data returned on gui window    def resetFilter(self):        self.main.destroy()        self.MainPage()            #HELPER METHOD FOR MAIN PAGE    #applies filter and returns the data on the gui window    def applyFilter(self):        #the sql that is gonna be used !!!        theSQL = ""        which = self.value.get()                        if which == 1 or which==3:            projectSQL = "SELECT DISTINCT P.Project_name as Name, 'Project' as Type FROM PROJECT AS P LEFT OUTER JOIN PROJ_REQ AS PR ON P.Project_name=PR.P_Name, PROJ_IS_CATEGORY AS PC WHERE P.Project_name = PC.P_name "                                if which == 2 or which==3:            courseSQL = "SELECT DISTINCT C.Course_name as Name, 'Course' as Type FROM COURSE AS C, COURSE_IS_CATEGORY as CC WHERE C.Course_num=CC.Course_number "                                if self.titleVar.get() != "":            theTitle = self.titleVar.get()            if which == 1 or which==3 :                add = "AND (P.Project_name = '" + theTitle + "') "                projectSQL = projectSQL + add            if which == 2 or which==3:                add = "AND (C.Course_name = '" + theTitle + "') "                courseSQL = courseSQL + add                        if self.designationVar.get() != "":            theDesignation = self.designationVar.get()            if which == 1 or which==3:                add = "AND (P.Des_name = '" + theDesignation + "') "                projectSQL = projectSQL + add                                if which == 2 or which==3:                add = "AND (C.Des_name = '" + theDesignation + "') "                courseSQL = courseSQL + add        if self.majorVar.get() != "" and (which==1 or which==3):            theMajor = self.majorVar.get()                        dept_SQL= "SELECT Dept_name FROM MAJOR WHERE Major_name = '" + theMajor +"';"                        hostname = "academic-mysql.cc.gatech.edu"            password = "lb05TC_S"            username = "cs4400_Team_92"            dbname = "cs4400_Team_92"                        db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)            cursor = db.cursor()            cursor.execute(dept_SQL)                        deptname=""            for record in cursor:                deptname= deptname + record[0]                        add = "AND ((PR.Requirement = '" + theMajor + "') OR (PR.Requirement = '" + deptname + "')) "            projectSQL = projectSQL + add        if self.yearVar.get() != "" and (which==1 or which==3) and self.majorVar.get() == "":                        theYear = str(self.yearVar.get())                       add = "AND (PR.Requirement = '" + theYear + "') "            projectSQL = projectSQL + add                           if self.categoryVar.get() != "":            #Insert the First category into the filter            theCat = self.categoryVar.get()            if which == 1 or which==3:                add = "AND (PC.Cat_name = '" + theCat + "' "                projectSQL = projectSQL + add                i = 0                while (i < self.catCount):                    otherCat = self.extraCategoryList[i].get()                    add = "OR PC.Cat_name = '" + otherCat + "' "                    projectSQL += add                    i += 1                                    projectSQL += ")"                                            if which == 2 or which==3:                add = "AND (CC.Cat_name = '" + theCat + "' "                courseSQL = courseSQL + add                i = 0                while (i < self.catCount):                    otherCat = self.extraCategoryList[i].get()                    add = "OR CC.Cat_name = '" + otherCat + "' "                    courseSQL += add                    i += 1                courseSQL += ") "        if which==1:            theSQL= projectSQL + "ORDER BY Name;"                    elif which==2 and (self.majorVar.get() != "" or self.yearVar.get() != ""):            theSQL= "SELECT DISTINCT P.Project_name as Name, 'Project' as Type FROM PROJECT AS P WHERE P.Project_name = 'ALSKFDJALSDJFOAISDHF';"        elif which==3 and (self.majorVar.get() != "" or self.yearVar.get() != ""):            theSQL= projectSQL + "ORDER BY Name;"        elif which==3:            theSQL= projectSQL + "UNION " + courseSQL + "ORDER BY Name;"        elif which==2:            theSQL= courseSQL + "ORDER BY Name;"                            self.generatelist(theSQL)                        #helper function for back button on MePage    def backToMainPage(self):        self.me.update()        self.me.withdraw()        self.main.deiconify()############################################################################2. Me     def MePage(self):        self.me = Toplevel()        self.main.update()        self.main.withdraw()        self.me.title("Me")        frame = Frame(self.me)        frame.grid(row=0,column=0)        mLabel = Label(frame,text="Me",height = 2,font = "Helvetica 20")        mLabel.grid(row=0,column=0)        mLabel.configure(foreground="dark goldenrod")        editProf = Button(frame,text="Edit Profile",command=self.editProfile)        editProf.grid(row=1,column=0)        editProf.config(relief=SUNKEN)                blank = Label(frame,width=20)        blank.grid(row=2,column=0)        myApp = Button(frame,text="My Application",command=self.myApplication)        myApp.grid(row=3,column=0)        myApp.config(relief=SUNKEN)        blank = Label(frame)        blank.grid(row=4,column=0)        back = Button(frame,text="Back",command=self.backToMainPage)        back.grid(row=5,column=0)        ########################################################################################3. Edit Profile    def editProfile(self):        self.editProfile = Toplevel()        self.me.update()        self.me.withdraw()        self.editProfile.title("Edit Profile")        self.editProfF = Frame(self.editProfile)        self.editProfF.grid(row=0,column=0)        mLabel = Label(self.editProfF,text="Edit Profile",height = 2,font = "Helvetica 20")        mLabel.grid(row=0,column=0,columnspan=2)        mLabel.configure(foreground="dark goldenrod")        labelM = Label(self.editProfF,text="Major")        labelM.grid(row=1,column=0)        hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"        db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        getMajorAndYearSQL = "SELECT Maj_name,Year FROM USER WHERE Username=%s;"        num = cursor.execute(getMajorAndYearSQL,(self.actualUser))        if num==0:            db.commit()            cursor.close()            db.close()            #this is what its auto set to if major name and year are null            currentMajor = ""            currentYear = ""            currentDepartment = ""                    else:            for record in cursor:                currentMajor = record[0]                    currentYear = record[1]                          db.commit()            cursor.close()            db.close()        if currentYear == 1:            currentYear = "Freshman"        elif currentYear == 2:            currentYear = "Sophomore"        elif currentYear == 3:            currentYear = "Junior"        elif currentYear == 4:            currentYear = "Senior"                self.editMajorVar = StringVar()        self.editMajorVar.set(currentMajor)        majDrop = OptionMenu(self.editProfF,self.editMajorVar,*self.majorList,command = self.updateMajorAndDepartment)        majDrop.grid(row=1,column=1)        majDrop.config(width=30)        hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"        db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        getDepartmentSQL = "SELECT Dept_name FROM MAJOR WHERE Major_name = %s"        cursor.execute(getDepartmentSQL,(self.editMajorVar.get()))        currentDepartment = ""        for record in cursor:            currentDepartment = currentDepartment + record[0]                  db.commit()        cursor.close()        db.close()        yearL = Label(self.editProfF,text="Year")        yearL.grid(row=2,column=0)        self.editYearVar = StringVar()        self.editYearVar.set(currentYear)        yearDrop = OptionMenu(self.editProfF,self.editYearVar,*self.yearList,command=self.updateYear)        yearDrop.grid(row=2,column=1)        dL = Label(self.editProfF,text="Department")        dL.grid(row=3,column=0)        self.departmentL = Label(self.editProfF,text=currentDepartment)        self.departmentL.grid(row=3,column=1)        backButton = Button(self.editProfF,text="Back",command=self.backToMePage)        backButton.grid(row=4,column=0,columnspan=2)            #HELPER FOR EDIT PROFILE WINDOW            #updates year in User table    def updateYear(self,choice):        if self.editYearVar.get() == "Freshman":            year = 1        elif self.editYearVar.get() == "Sophomore":            year = 2        elif self.editYearVar.get() == "Junior":            year = 3        elif self.editYearVar.get() == "Senior":            year = 4                    hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        #updates User table's year every time you change it        updateUserProfileSQL = "UPDATE USER SET Year = %s WHERE Username = %s;"        cursor.execute(updateUserProfileSQL,(year,self.actualUser))        db.commit()        cursor.close()        db.close()    #HELPER FOR EDIT PROFILE WINDOW     #every time you change the major in editProfile window, this updates the department and table    def updateMajorAndDepartment(self,choice):        hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        getDepartmentSQL = "SELECT Dept_name FROM MAJOR WHERE Major_name = %s;"        cursor.execute(getDepartmentSQL,(self.editMajorVar.get()))        currentDepartment = ""        for record in cursor:            currentDepartment = currentDepartment + record[0]        #updates User table's major every time you change it        updateUserProfileSQL = "UPDATE USER SET Maj_name = %s WHERE Username = %s;"        cursor.execute(updateUserProfileSQL,(self.editMajorVar.get(),self.actualUser))        db.commit()        cursor.close()        db.close()        self.departmentL.grid_forget()        self.departmentL = Label(self.editProfF,text=currentDepartment)        self.departmentL.grid(row=3,column=1)            #HELPER FOR EDIT PROFILE WINDOW    #takes you back to the me page from editProfile window        def backToMePage(self):        self.editProfile.update()        self.editProfile.withdraw()        self.me.deiconify()        ########################################################################################4. My Application            def myApplication(self):        self.myApplication = Toplevel()        self.me.update()        self.me.withdraw()        self.myApplication.title("My Application")        dateLabel = Label(self.myApplication, text= "Date")        dateLabel.grid(row=1,column=1)        nameLabel = Label(self.myApplication, text= "Project Name")        nameLabel.grid(row=1,column=2)        statusLabel = Label(self.myApplication, text= "Status")        statusLabel.grid(row=1,column=3)                studentuser = self.userEntry.get()        hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"        db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        myAppSQL = "SELECT P_name, App_date, Status FROM APPLIES_TO WHERE S_username = %s;"        cursor.execute(myAppSQL,studentuser)        labcol = 1        labrow = 2        for singleapp in cursor:            for value in singleapp:                appLabel = Label(self.myApplication, text = value)                appLabel.grid(row = labrow, column = labcol)                labcol = labcol + 1            labcol = 1            labrow = labrow + 1        labrow = labrow + 1        backFromMyApp = Button(self.myApplication,text="Back",command=self.backToMePage2)        backFromMyApp.grid(row=labrow,column=2)                        db.commit()        cursor.close()        db.close()    #######################################################################################    #HELPER FOR MY APPLICATION WINDOW    #takes you back to the me page from myApplication window        def backToMePage2(self):        self.myApplication.update()        self.myApplication.withdraw()        self.me.deiconify()########################################################################################5. View and Apply Project    def viewProject(self):                self.viewP = Toplevel()        self.main.withdraw()        self.viewP.title("View and Apply Project")        projName = self.info[0]                hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        viewProjSQL = "SELECT DISTINCT PROJECT.Project_name, PROJECT.Advisor_name, PROJECT.Advisor_email, PROJECT.Description, PROJECT.Des_name, PROJ_IS_CATEGORY.Cat_name, PROJ_REQ.Requirement, PROJECT.Est_no_students FROM PROJECT LEFT JOIN PROJ_REQ ON PROJECT.Project_name = PROJ_REQ.P_name INNER JOIN PROJ_IS_CATEGORY ON PROJECT.Project_name = PROJ_IS_CATEGORY.P_name WHERE PROJECT.Project_name = %s;"        cursor.execute(viewProjSQL,projName)        resultList=[]        for result in cursor:            resultList.append(result)        self.totalList=[]        index=0                        for each in resultList[0]:            self.totalList.append(each)        for each in resultList:            for one in each:                if one != self.totalList[index]:                    currentVal = str(self.totalList[index])                    strOne=str(one)                    if strOne in currentVal:                        None                     else:                        self.totalList[index] = currentVal + ", " + strOne                index = index + 1                if index == 8:                    index = 0                    projTitle = Label(self.viewP, text = self.totalList[0])        projTitle.grid(row=0 , column = 1)        for each in range(1,8):                    if self.totalList[each] == None:                self.totalList[each] = "N/A"                    rowList = ["Advisor:     " + self.totalList[1] + " (" + self.totalList[2] + ") ", "Description:     " + self.totalList[3] , "Designation:     "+self.totalList[4], "Category:   "+self.totalList[5], "Requirements:     "+self.totalList[6], "Est. # of Students:     "+str(self.totalList[7])]                           rowcount = 1        for each in rowList:            rowLabel = Label(self.viewP, text = each)            rowLabel.grid( row = rowcount, column = 1)            rowcount = rowcount + 1        rowcount = rowcount+ 2        backBut = Button(self.viewP, text = "Back", command = self.goBack)        backBut.grid(row = rowcount, column = 0)        applyBut = Button(self.viewP, text = "Apply", command = self.applyProject)        applyBut.grid(row = rowcount, column = 1)        db.commit()        cursor.close()        db.close()            def goBack(self):        self.main.deiconify()        self.viewP.withdraw()    def applyProject(self):                hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        ####check if student has applied to project before####        User = self.userEntry.get()        user = User.lower()        pname = self.totalList[0]                appCheckSQL = "SELECT S_username, P_name FROM APPLIES_TO WHERE S_username = %s;"                cursor.execute(appCheckSQL,user)        appList=[]        for each in cursor:            appList.append(each)        for app in appList:            if app[1] == pname:                messagebox.showwarning("Error!","You have already applied for this project.")                return        ####check year requirement####        yearCheckSQL = "SELECT Requirement FROM PROJ_REQ WHERE PROJ_REQ.P_name = %s;"        cursor.execute(yearCheckSQL, pname)        reqList = []                for each in cursor:            reqList.append(each[0])        studYearSQL = "SELECT Year FROM USER WHERE USER.Username = %s;"        cursor.execute(studYearSQL, user)                for line in cursor:            studYear = line[0]        if studYear == None:            messagebox.showwarning("Error!","You must fill out your year in the Edit Profile window.")            return                    yReq = 0        for year in reqList:            if year == "Freshman":                yReq = 1            if year == "Sophomore":                yReq = 1            if year == "Junior":                yReq = 1            if year == "Senior":                yReq = 1        if yReq == 1:   #year req exists....go through check                        yearCount = 0            for req in reqList:                if req == studYear:                    yearCount = 1            if yearCount == 0:                messagebox.showwarning("Error!","You do not meet the year/major/department requirement for this project.")                return        ####check major requirement####                majorCheckSQL = "SELECT Maj_name FROM USER WHERE Username = %s;"        cursor.execute(majorCheckSQL, user)                for each in cursor:            studMaj = each[0]        if studMaj == None:            messagebox.showwarning("Error!","You must fill out your major in the Edit Profile window.")            return        deptCheckSQL = "SELECT Dept_name FROM MAJOR WHERE Major_name = %s;"        cursor.execute(deptCheckSQL, studMaj)        for each in cursor:            studDept = each[0]        mdList = []        mdList.append(studMaj)        mdList.append(studDept)        majReqList = reqList        for each in majReqList:            if each == "Freshman" or each == "Sophomore" or each == "Junior" or each == "Senior":                majReqList.remove(each)                        majCheck = 0        if majReqList != []:  #if there is a major or dept requirement            for each in mdList: #checks user major and dept                if each in majReqList: #one of them has to be in the major/dept requirements                    majCheck = 1            if majCheck == 0:                messagebox.showwarning("Error!","You do not meet the year/major/department requirement for this project.")                return        today = date.today()        statVal = "Pending"        insertAppSQL = "INSERT INTO APPLIES_TO (S_username, P_name, App_date, Status) Values (%s,%s,%s,%s);"        cursor.execute(insertAppSQL,(user, pname, today,statVal))                                   db.commit()        cursor.close()        db.close()########################################################################################6. View Course            def viewCourse(self):                        self.viewC = Toplevel()        self.main.withdraw()        self.viewC.title("View Course")        courseName = self.info[0]                hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        getCnumSQL = "SELECT Course_num FROM COURSE WHERE Course_name = %s;"        cursor.execute(getCnumSQL, courseName)        for each in cursor:            cNum = each[0]        viewCourseSQL = "SELECT COURSE.Course_num, COURSE.Course_name, COURSE.Instructor, COURSE.Des_name, COURSE_IS_CATEGORY.Cat_name, COURSE.Est_no_students FROM COURSE LEFT JOIN COURSE_IS_CATEGORY ON COURSE.Course_num = COURSE_IS_CATEGORY.Course_number WHERE COURSE.Course_num = %s;"        cursor.execute(viewCourseSQL,cNum)        resultList=[]        for result in cursor:            resultList.append(result)        self.totalList=[]        index=0        for each in resultList[0]:            self.totalList.append(each)        for each in resultList:            for one in each:                if one != self.totalList[index]:                    currentVal = str(self.totalList[index])                    strOne=str(one)                    if strOne in currentVal:                        None                     else:                                                self.totalList[index] = currentVal + ", " + strOne                index = index + 1                if index == 6:                    index = 0                    courseTitle = Label(self.viewC, text = self.totalList[0])        courseTitle.grid(row=0 , column = 1)        for each in range(1,6):                    if self.totalList[each] == None:                self.totalList[each] = "N/A"                    rowList = ["Course Name:     " + self.totalList[1], "Instructor:     " + self.totalList[2] , "Designation:     "+self.totalList[3], "Category:   "+self.totalList[4], "Estimated Number of Students:     "+str(self.totalList[5])]                           rowcount = 1        for each in rowList:            rowLabel = Label(self.viewC, text = each)            rowLabel.grid( row = rowcount, column = 1)            rowcount = rowcount + 1        rowcount = rowcount+ 2        backBut = Button(self.viewC, text = "Back", command = self.backtoM)        backBut.grid(row = rowcount, column = 0)        db.commit()        cursor.close()        db.close()    def backtoM(self):        self.viewC.withdraw()        self.main.deiconify()        #Just Admin from here to end########################################################################################1. Choose Functionality (admin view)    def chooseFunctionality(self):        self.chooseFunct = Toplevel()        self.chooseFunct.title("Choose Functionality")        self.win.update()        self.win.withdraw()        self.chooseFunct.deiconify()        chooseL = Label(self.chooseFunct,text="Choose Functionality",height = 2,font = "Helvetica 20")        chooseL.grid(row=0,column=0,columnspan=2)        chooseL.configure(foreground="dark goldenrod")        viewAppButton = Button(self.chooseFunct,text = "View Applications",command=self.viewApps)        viewAppButton.grid(row=1,column=0)        popProjectButton = Button(self.chooseFunct,text = "View Popular Project Report",command=self.popularProject)        popProjectButton.grid(row=2,column=0)        viewAppButton = Button(self.chooseFunct,text = "View Application Report",command=self.appReport)        viewAppButton.grid(row=3,column=0)        addProjectButton = Button(self.chooseFunct,text = "Add a Project",command=self.addProject)        addProjectButton.grid(row=4,column=0)                addCourseButton = Button(self.chooseFunct,text = "Add a Course",command=self.addCourse)        addCourseButton.grid(row=5,column=0)        logoutButton = Button(self.chooseFunct,text = "Logout",command=self.logout)        logoutButton.grid(row=6,column=0)    def logout(self):        messagebox.showinfo("Congratulations!","You have logged out successfully.")        self.chooseFunct.update()        self.chooseFunct.withdraw()        self.win.destroy()        win = Tk()        app = Phase3(win)        ########################################################################################2. View Applications            def viewApps(self):        self.viewApp = Toplevel()        self.viewApp.title("Application")        self.chooseFunct.update()        self.chooseFunct.withdraw()        hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"        db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        viewAppSQL = "SELECT APPLIES_TO.P_name, USER.Maj_name, USER.Year, APPLIES_TO.Status FROM APPLIES_TO INNER JOIN USER ON APPLIES_TO.S_username = USER.Username;"        cursor.execute(viewAppSQL)                topcol=2        topList = ["Project", "Applicant Major", "Applicant Year", "Status"]        for each in topList:            topLabel = Label(self.viewApp, text = each)            topLabel.grid(row = 1, column = topcol)            topcol = topcol + 1                labcol = 2        labrow = 2        rbrow=2        self.radVal = IntVar()        rbVal = 1        for singleapp in cursor:            for value in singleapp:                if value == singleapp[3]:                    if value == "Pending":                        rb = Radiobutton(self.viewApp, variable = self.radVal, value = rbVal)                        rb.grid(row=rbrow,column=1)                    rbrow = rbrow + 1                    rbVal = rbVal + 1                                        appLabel = Label(self.viewApp, text = value)                appLabel.grid(row = labrow, column = labcol)                labcol = labcol + 1            labcol = 2            labrow = labrow + 1        labrow = labrow + 1                acceptBut = Button(self.viewApp, text = "Accepted", command = self.acceptProject)        acceptBut.grid(row = labrow, column = 3)        rejectBut = Button(self.viewApp, text = "Rejected", command = self.rejectProject)        rejectBut.grid(row = labrow, column = 5)        backBut = Button(self.viewApp, text = "Back", command = self.backToFunc)        backBut.grid(row = labrow, column = 1)                db.commit()        cursor.close()        db.close()        self.viewApp.deiconify()################function to go back to functionality window    def backToFunc(self):        self.viewApp.withdraw()        self.chooseFunct.deiconify()                #function for admin to accept project    def acceptProject(self):                radioVal = self.radVal.get()        hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        viewAppSQL = "SELECT APPLIES_TO.P_name, APPLIES_TO.S_Username, USER.Maj_name, USER.Year, APPLIES_TO.Status FROM APPLIES_TO INNER JOIN USER ON APPLIES_TO.S_username = USER.Username;"        cursor.execute(viewAppSQL)        cursorList = []        for singleApp in cursor:            cursorList.append(singleApp)        for app in cursorList:            if app == cursorList[radioVal-1]:                self.projName = app[0]                self.studName = app[1]        updateAppStatusSQL = "UPDATE APPLIES_TO SET Status = 'Accepted' WHERE P_name = %s AND S_username = %s;"        cursor.execute(updateAppStatusSQL,(self.projName,self.studName))        db.commit()        cursor.close()        db.close()        self.viewApp.destroy()        self.viewApps()#function for admin to accept project    def rejectProject(self):                radioVal = self.radVal.get()        hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        viewAppSQL = "SELECT APPLIES_TO.P_name, APPLIES_TO.S_Username, USER.Maj_name, USER.Year, APPLIES_TO.Status FROM APPLIES_TO INNER JOIN USER ON APPLIES_TO.S_username = USER.Username;"        cursor.execute(viewAppSQL)        cursorList = []        for singleApp in cursor:            cursorList.append(singleApp)        for app in cursorList:            if app == cursorList[radioVal-1]:                self.projName = app[0]                self.studName = app[1]        updateAppStatusSQL = "UPDATE APPLIES_TO SET Status = 'Rejected' WHERE P_name = %s AND S_username = %s;"        cursor.execute(updateAppStatusSQL,(self.projName,self.studName))        db.commit()        cursor.close()        db.close()        self.viewApp.destroy()        self.viewApps()########################################################################################3. View Popular Project Report    def popularProject(self):        self.popProject = Toplevel()        self.popProject.title("Popular Project")        self.chooseFunct.withdraw()        self.popProject.deiconify()        self.outputFrame1 = tkinter.ttk.Treeview(self.popProject, columns=('Type'))        self.outputFrame1.grid(row=1,column=0, sticky=W+E+N+S)        self.outputFrame1.heading("#0", text='Project', anchor='w')        self.outputFrame1.heading('Type', text='# of Applicants')        titleLabel = Label(self.popProject,text="Popular Project",height=4,font = "Helvetica 20")        titleLabel.grid(row=0,column=0,sticky=N)        titleLabel.configure(foreground="dark goldenrod")                popsql = "SELECT P_name, COUNT(Status) AS No_of_Apps FROM APPLIES_TO GROUP BY P_name ORDER BY COUNT(Status) DESC LIMIT 10;"        hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        cursor.execute(popsql)        popList=[]        for i in cursor:            popList.append(i)                db.commit()        cursor.close()        db.close()        for item in popList:            self.outputFrame1.insert('', 'end', text=item[0], values=item[1])        backBut = Button(self.popProject, text = "Back", command = self.backToFunc1)        backBut.grid(row = 2, column = 0)                        self.popProject.deiconify()##################################################################################function to go back to functionality window    def backToFunc1(self):        self.popProject.withdraw()        self.chooseFunct.deiconify()        ########################################################################################4. View Application Report    def appReport(self):        self.appReport = Toplevel()        self.appReport.title("Application Report")        self.chooseFunct.update()        self.chooseFunct.withdraw()        self.appReport.deiconify()        self.outputFrame2 = tkinter.ttk.Treeview(self.appReport, columns=('No_of_Applicants', 'Accept_Rate', 'Top_3_Major'))        self.outputFrame2.grid(row=2,column=0, sticky=W+E+N+S)        self.outputFrame2.heading("#0", text='Project', anchor='w')        self.outputFrame2.heading('No_of_Applicants', text='# of Applicants')        self.outputFrame2.heading('Accept_Rate', text = 'Accept Rate')        self.outputFrame2.heading('Top_3_Major', text = 'Top 3 Major')        titleLabel = Label(self.appReport,text="Popular Project",height=4,font = "Helvetica 20")        titleLabel.grid(row=0,column=0,sticky=N)        titleLabel.configure(foreground="dark goldenrod")        backBut = Button(self.appReport, text = "Back", command = self.backToFunc2)        backBut.grid(row = 3, column = 0)                appNumbersql = "SELECT COUNT(Status) FROM APPLIES_TO;"        acceptNumbersql = "SELECT Count(Status) FROM `APPLIES_TO` WHERE Status= 'accepted'"        popsql2 = "SELECT H.P_name, H.No_of_apps,H.Num_accept/H.No_of_apps * 100 AS Perct_acc, H.Maj_name FROM (SELECT A.P_name, Count(A.Status) as No_of_apps, C.Maj_name, IFNULL(G.No_acc, 0 ) as Num_accept FROM APPLIES_TO as A, USER as U, (SELECT B.P_name, T.Maj_name, COUNT(T.Maj_name) FROM APPLIES_TO as B, USER as T WHERE B.S_username=T.Username GROUP BY concat(B.P_name, T.Maj_name)) AS C, (SELECT DISTINCT D.P_Name, F.No_acc FROM APPLIES_TO AS D LEFT OUTER JOIN (SELECT P_NAME, COUNT(Status) AS No_acc FROM APPLIES_TO AS F WHERE Status='Accepted' GROUP BY P_NAME) AS F ON F.P_name=D.P_name) AS G WHERE A.S_username=U.Username AND A.P_name=C.P_name AND A.P_name=G.P_name GROUP BY concat(A.P_name, C.Maj_name)) AS H ORDER BY Perct_acc DESC, H.P_name;"        hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        cursor.execute(appNumbersql)        appNumber = 0        for i in cursor:            appNumber = str(i)        cursor.execute(acceptNumbersql)        acceptNumber = 0        for i in cursor:            acceptNumber = str(i)                descLabel = Label(self.appReport,text= appNumber + " applications in total, accepted " + acceptNumber + " applications")        descLabel.grid(row=1,column=0,sticky=W)        cursor.execute(popsql2)        popList=[]        for i in cursor:            popList.append(i)        finalList = []        i = 0        while i < (len(popList) - 1):                        myTup = popList[i]            majors = popList[i][3]            percentage = str(popList[i][2]) + "%"            count = 0                    while (((i+1) < len(popList)) and (popList[i][0] == popList[i+1][0])):                if count < 3:                    majors += "/" + str(popList[i+1][3])                i += 1                count+=1            projectList = []            for item in myTup[0:2]:                projectList.append(item)            projectList.append(percentage)            projectList.append(majors)            i += 1            finalList.append(projectList)        if i < (len(popList)):                finalList.append(list(popList[len(popList) - 1]))                        for item in finalList:            self.outputFrame2.insert('', 'end', text=item[0], values=[item[1], item[2], item[3]])        db.commit()        cursor.close()        db.close()#function to go back to functionality window    def backToFunc2(self):        self.appReport.withdraw()        self.chooseFunct.deiconify()########################################################################################5. Add a project    def addProject(self):        self.addProj = Toplevel()        self.addProj.title("Add a Project")        self.chooseFunct.update()        self.chooseFunct.withdraw()        self.addProj.deiconify()        titleLabel = Label(self.addProj,text="Add a Project",height=4,font = "Helvetica 20")        titleLabel.grid(row=0,column=1,sticky=N)        titleLabel.configure(foreground="dark goldenrod")##### Project label and entry box        projLabel = Label(self.addProj,text="Project Name:")        projLabel.grid(row=1,column=0,sticky=N)        self.projVar= StringVar()        projEntry = Entry(self.addProj, textvariable=self.projVar, width=30)        projEntry.grid(row=1,column=1,sticky=N)##### Advisor label and entry box        advLabel = Label(self.addProj,text="Advisor:")        advLabel.grid(row=2,column=0,sticky=N)        self.advVar = StringVar()        advEntry = Entry(self.addProj, textvariable= self.advVar, width=30)        advEntry.grid(row=2,column=1,sticky=N)##### Advisor Email label and entry box        advEmailLabel = Label(self.addProj,text="Advisory Email:")        advEmailLabel.grid(row=3,column=0,sticky=N)        self.advEmailVar= StringVar()        advEmailEntry = Entry(self.addProj,textvariable= self.advEmailVar, width=30)        advEmailEntry.grid(row=3,column=1,sticky=N)##### Description label and entry box        descLabel = Label(self.addProj,text="Description:")        descLabel.grid(row=4,column=0,sticky=N)        self.descVar = StringVar()        descEntry = Entry(self.addProj,textvariable= self.descVar, width=30)        descEntry.grid(row=4,column=1,sticky=N)#### Category Label and Drop Downs        catLabel = Label(self.addProj, text = "Category:")        catLabel.grid(row=5, column=0, sticky=N)        hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        sqlCheck = "SELECT Category_name FROM CATEGORY ORDER BY Category_name;"        cursor.execute(sqlCheck)        self.categoryList = []                for record in cursor:            category = record[0]            self.categoryList.append(category)                    self.catVar = StringVar()        catDrop = OptionMenu(self.addProj,self.catVar,*self.categoryList)        catDrop.grid(row=5,column=1)        catDrop.config(width=30)        #ADD A CATEGORY DROPDOWN        self.categoryFrame = Frame(self.addProj)        self.categoryFrame.grid(row=6,column=1)        self.extraCategoryList = []        self.catCount = 0                addCategory = Button(self.categoryFrame,text="Add a category",command=self.addCategory)        addCategory.grid(row=5,column=1)        self.categoryRow = 0#### Designation Label and Drop Down        designationLabel = Label(self.addProj,text="Designation:")        designationLabel.grid(row=7,column=0,sticky=N)        sql = "SELECT Designation_name FROM DESIGNATION ORDER BY Designation_name;"        cursor.execute(sql)        self.designationList = []                for record in cursor:            designation = record[0]            self.designationList.append(designation)        self.designationVar = StringVar()        desDrop = OptionMenu(self.addProj,self.designationVar,*self.designationList)        desDrop.grid(row=7,column=1)        desDrop.config(width=30)#### Estimate # of Students label and entry box        nostudentsLabel = Label(self.addProj,text="Estimated # of Students:")        nostudentsLabel.grid(row=8,column=0,sticky=N)        self.nostudentsVar= StringVar()        nostudentsEntry = Entry(self.addProj, textvariable= self.nostudentsVar, width=30)        nostudentsEntry.grid(row=8,column=1,sticky=N)#### Major Label and Drop Down        check = "SELECT Major_name FROM MAJOR ORDER BY Major_name;"        cursor.execute(check)        self.majorList = []                for record in cursor:            major = record[0]            self.majorList.append("Only "+ major + " Students")        majLabel = Label(self.addProj,text="Major Requirement")        majLabel.grid(row=9,column=0)        self.majorVar = StringVar()        majDrop = OptionMenu(self.addProj,self.majorVar,*self.majorList)        majDrop.grid(row=9,column=1)        majDrop.config(width=30)        self.yearList = ["Only Freshman Students","Only Sophomore Students","Only Junior Students","Only Senior Students"]                yrLabel = Label(self.addProj,text="Year Requirement")        yrLabel.grid(row=10,column=0)        self.yearVar = StringVar()        yearDrop = OptionMenu(self.addProj,self.yearVar,*self.yearList)        yearDrop.grid(row=10,column=1)        deptsql = "SELECT Department_name FROM DEPARTMENT ORDER BY Department_name;"        cursor.execute(deptsql)                db.commit()        cursor.close()        db.close()                self.deptList = []                for record in cursor:            dept = record[0]            self.deptList.append(dept)        deptLabel = Label(self.addProj,text="Department Requirement")        deptLabel.grid(row=11,column=0)        self.deptVar = StringVar()        deptDrop = OptionMenu(self.addProj,self.deptVar,*self.deptList)        deptDrop.grid(row=11,column=1)        deptDrop.config(width=30)        backBut = Button(self.addProj, text = "Back", command = self.backToFunc3)        backBut.grid(row = 12, column = 0)        submitBut = Button(self.addProj, text = "Submit", command = self.insertNewProj)        submitBut.grid(row = 12, column = 1)            #function to go back to functionality window    def backToFunc3(self):        self.addProj.withdraw()        self.chooseFunct.deiconify()    #function to insert proj    def insertNewProj(self):        pname= self.projVar.get()        advisor= self.advVar.get()        aEmail= self.advEmailVar.get()        descrip = self.descVar.get()        catlist=[self.catVar.get()]                i = 0        while (i < self.catCount):            otherCat = self.extraCategoryList[i].get()            catlist.append(otherCat)            i += 1        desig=self.designationVar.get()        no_stud= self.nostudentsVar.get()        major= self.majorVar.get()        year= self.yearVar.get()        dept=self.deptVar.get()        hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        if pname=="" or advisor=="" or aEmail=="" or descrip=="" or self.catVar.get()=="" or desig=="" or no_stud=="":            messagebox.showwarning("Error!","You must fill all fields besides requirements.")            return None        else:            sql = '''INSERT INTO PROJECT (Project_name,Est_no_students, Advisor_name, Advisor_Email, Description, Des_name) VALUES (%s,%s,%s,%s,%s,%s)'''            cursor.execute(sql,(pname,no_stud, advisor, aEmail, descrip, desig))            for i in catlist:                sql2 ='''INSERT INTO PROJ_IS_CATEGORY (P_name, Cat_name) VALUES (%s,%s)'''                cursor.execute(sql2,(pname, i))            if major != "":                sql3 ='''INSERT INTO PROJ_REQ (P_name, Requirement) VALUES (%s,%s)'''                cursor.execute(sql3,(pname, major[5:-9]))            if year != "":                sql4 ='''INSERT INTO PROJ_REQ (P_name, Requirement) VALUES (%s,%s)'''                cursor.execute(sql4,(pname, year[5:-9]))            if dept != "":                sql5 ='''INSERT INTO PROJ_REQ (P_name, Requirement) VALUES (%s,%s)'''                cursor.execute(sql5,(pname, dept))                            db.commit()            cursor.close()            db.close()            messagebox.showinfo("Congratulations!","You have added this project")            self.addProj.destroy()            self.addProject()               ########################################################################################6. Add a course    def addCourse(self):        self.addCourse = Toplevel()        self.addCourse.title("Add a Course")        self.chooseFunct.update()        self.chooseFunct.withdraw()        self.addCourse.deiconify()                titleLabel = Label(self.addCourse,text="Add a Course",height=4,font = "Helvetica 20")        titleLabel.grid(row=0,column=1,sticky=N)        titleLabel.configure(foreground="dark goldenrod")##### Course number label and entry box        courseLabel = Label(self.addCourse,text="Course Number:")        courseLabel.grid(row=1,column=0,sticky=N)                self.courseNum = Entry(self.addCourse,width=30)        self.courseNum.grid(row=1,column=1,sticky=N)##### Course Name label and entry box        namLabel = Label(self.addCourse,text="Course Name:")        namLabel.grid(row=2,column=0,sticky=N)                self.courseNameEnt = Entry(self.addCourse,width=30)        self.courseNameEnt.grid(row=2,column=1,sticky=N)##### Instructor label and entry box        instructLabel = Label(self.addCourse,text="Instructor:")        instructLabel.grid(row=3,column=0,sticky=N)                self.instructEnt = Entry(self.addCourse,width=30)        self.instructEnt.grid(row=3,column=1,sticky=N)#### Category Label and Drop Downs        catLabel = Label(self.addCourse, text = "Category:")        catLabel.grid(row=5, column=0, sticky=N)        hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"                db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        sqlCheck = "SELECT Category_name FROM CATEGORY ORDER BY Category_name;"        cursor.execute(sqlCheck)        self.categoryList = []                for record in cursor:            category = record[0]            self.categoryList.append(category)                    self.categoryVariable = StringVar()        catDrop = OptionMenu(self.addCourse,self.categoryVariable,*self.categoryList)        catDrop.grid(row=5,column=1)        catDrop.config(width=30)        #ADD A CATEGORY DROPDOWN        self.categoryFrame = Frame(self.addCourse)        self.categoryFrame.grid(row=6,column=1)        self.extraCategoryList = []        self.catCount = 0                addCategory = Button(self.categoryFrame,text="Add a new category",command=self.addCategory)        addCategory.grid(row=5,column=2)        self.categoryRow = 0        backBut = Button(self.addCourse, text = "Back", command = self.backToFunc4)        backBut.grid(row = 8, column = 0)#### Designation Label and Drop Down        designationLabel = Label(self.addCourse,text="Designation:")        designationLabel.grid(row=4,column=0,sticky=N)        sql = "SELECT Designation_name FROM DESIGNATION ORDER BY Designation_name;"        cursor.execute(sql)        self.designationList = []                for record in cursor:            designation = record[0]            self.designationList.append(designation)        self.designationVariable = StringVar()        desDrop = OptionMenu(self.addCourse,self.designationVariable,*self.designationList)        desDrop.grid(row=4,column=1)        desDrop.config(width=30)#### Estimate # of Students label and entry box        numStudLabel = Label(self.addCourse,text="Estimated # of students:")        numStudLabel.grid(row=7,column=0,sticky=N)                self.numberStudentEntry = Entry(self.addCourse,width=30)        self.numberStudentEntry.grid(row=7,column=1,sticky=N)### submit button ##########        subButton = Button(self.addCourse,text="Submit",command = self.courseSubmit)        subButton.grid(row=8,column=1)        db.commit()        cursor.close()        db.close()    #function to go back to functionality window    def backToFunc4(self):        self.addCourse.withdraw()        self.chooseFunct.deiconify()    #helper function to add a course to database       def courseSubmit(self):                courseNum = self.courseNum.get()        courseName = self.courseNameEnt.get()        instructorName = self.instructEnt.get()        designation = self.designationVariable.get()        category = self.categoryVariable.get()        estNumStudents = self.numberStudentEntry.get()        i = 0        catList = [category]        while (i < self.catCount):            otherCat = self.extraCategoryList[i].get()            catList.append(otherCat)            i += 1                  hostname = "academic-mysql.cc.gatech.edu"        password = "lb05TC_S"        username = "cs4400_Team_92"        dbname = "cs4400_Team_92"        db = pymysql.connect(host=hostname,passwd=password,user=username,db=dbname)        cursor = db.cursor()        if courseNum=="" or courseName =="" or instructorName=="" or designation=="" or category=="" or estNumStudents=="":            messagebox.showwarning("Error!","You must fill all fields besides requirements.")            return None        else:            sql = '''INSERT INTO COURSE (Course_num,Course_name,Instructor,Est_no_students,Des_name) VALUES (%s,%s,%s,%s,%s);'''            cursor.execute(sql,(courseNum, courseName, instructorName, estNumStudents, designation))            for i in catList:                sql2 ='''INSERT INTO COURSE_IS_CATEGORY (Course_number, Cat_name) VALUES (%s,%s)'''                cursor.execute(sql2,(courseNum, i))        db.commit()        cursor.close()        db.close()                messagebox.showinfo("Congrats!","You have added a course!")       #######################################################################################               win = Tk()app = Phase3(win)win.mainloop()